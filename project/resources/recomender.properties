neo4JDB=./carles/documents/neo4j/recommender.db
wikiDataDB=https://query.wikidata.org/sparql
writer=./resources/books/writer
book=./resources/books/book
genre=./resources/books/genre
bookWriterRelation=./resources/books/bookWriterRelation
bookGenreRelation=./resources/books/bookGenreRelation
actor=./resources/films/actor
director=./resources/films/director
film=./resources/films/film
actorRole=./resources/films/actorRole
filmDirector=./resources/films/filmDirector
band=./resources/music/band
bandMemberRelation=./resources/music/bandMemberRelation
musician=./resources/music/musician
song=./resources/music/song
songBandRelation=./resources/music/songBandRelation
songGenreRelation=./resources/music/songGenreRelation
songPerformerRelation=./resources/music/songPerformerRelation
bandGenreRelation=./resources/music/BandGenreRelation


#SE AÑADEN LOS PARÁMETROS DE KAFKA
serversProperty=bootstrap.servers
idGroupProperty=group.id
keyDeserializerProperty=key.deserializer
valueDeserializerProperty=value.deserializer
serverConnection=debian-kafka-vm2:9092

groupTopic=home-group
topic=home

recomendacion=MATCH	(u1:User {nickname:'pepVila'})-[l1:Likes]->(pe:Person)-[pa]->(f1:ArtWork)-[ag]->(ge:Genre)<-[l2:Likes]-(u2:User {nickname:'pepVila'})-[:Has]->(f2:ArtWork) \
	WHERE not(u2-[:Has]->f1) \
	  AND type(pa) in ['ActorActedFilm', 'DirectorDirectedFilm', 'MusicianPlayedSong', 'WriterWroteBook'] \
	  AND type(ag) in ['FilmGenre', 'SongGenre', 'BookGenre'] \
	WITH distinct u1.nickname as nickname, pe.name as author, type(pa) as relation, f1.title as title, ge.name as genre \
	WITH nickname, author, relation, title, collect(genre) as genre \
	RETURN nickname, collect(author) as author, collect(relation) as artwork_relation, title, genre \
	UNION \
	MATCH (u1:User {nickname:'pepVila'})-[l1:Likes]->(pe:Person)-[mb:MusicianMemberOfBand]-(ba:Band), pe-[pa]->(f1:ArtWork)-[ag]->(ge:Genre)<-[l2:Likes]-(u2:User {nickname:'pepVila'})-[:Has]->(f2:ArtWork) \
	WHERE not(u2-[:Has]->f1) \
	  AND type(pa) in ['BandPlayedSong'] \
	  AND type(ag) in ['FilmGenre', 'SongGenre', 'BookGenre'] \
	WITH distinct u1.nickname as nickname, pe.name as author, type(pa) as relation, f1.title as title, ge.name as genre \
	WITH nickname, author, relation, title, collect(genre) as genre \
	RETURN nickname, collect(author) as author, collect(relation) as artwork_relation, title, genre \
	ORDER BY nickname, title \