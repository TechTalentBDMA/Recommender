neo4JDB=C:/Users/sorel/Documents/Neo4j/recommender4.db
wikiDataDB=https://query.wikidata.org/sparql
writer=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\books\\writer
book=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\books\\book
genre=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\books\\genre
bookWriterRelation=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\books\\bookWriterRelation
actor=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\films\\actor
director=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\films\\director
film=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\films\\film
actorRole=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\films\\actorRole
filmDirector=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\films\\filmDirector
band=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\music\\band
bandMemberRelation=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\music\\bandMemberRelation
musician=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\music\\musician
song=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\music\\song
songPerformerRelation=C:\\Users\\sorel\\git\\upc\\Recommender\\project\\resources\\music\\songPerformerRelation


#SE AÑADEN LOS PARÁMETROS DE KAFKA
serversProperty=bootstrap.servers
idGroupProperty=group.id
keyDeserializerProperty=key.deserializer
valueDeserializerProperty=value.deserializer
serverConnection=debian-kafka-vm2:9092

groupTopic=home-group
topic=home

recomendacion=	(u2:User {nickname:'pepVila'})-[:Has]->(f2:ArtWork) \
	MATCH	(u1:User {nickname:'pauLaMejor'})-[l1:Likes]->(pe:Person)-[pa]->(f1:ArtWork)-[ag]->(ge:Genre)<-[l2:Likes]-(u2:User {nickname:'pauLaMejor'})-[:Has]->(f2:ArtWork)\
	WHERE	not(u2-[:Has]->f1)\
	  AND	type(pa) in ['ActorActedFilm', 'DirectorDirectedFilm', 'MusicianPlayedSong', 'WriterWroteBook']\
	  AND	type(ag) in ['FilmGenre', 'SongGenre', 'BookGenre']\
	WITH	distinct u1.nickname as nickname, pe.name as author, type(pa) as relation, f1.title as title, ge.name as genre\
	WITH	nickname, author, relation, title, collect(genre) as genre\
	RETURN	nickname, collect(author) as author, collect(relation) as artwork_relation, title, genre\
	UNION\
	MATCH	(u1:User {nickname:'pauLaMejor'})-[l1:Likes]->(pe:Person)-[mb:MusicianMemberOfBand]->(ba:Band)-[pa]->(f1:ArtWork)-[ag]->(ge:Genre)<-[l2:Likes]-(u2:User {nickname:'pauLaMejor'})-[:Has]->(f2:ArtWork)\
	WHERE	not(u2-[:Has]->f1)\
	  AND	type(pa) in ['BandPlayedSong']\
	  AND	type(ag) in ['BandGenre']\
	WITH	distinct u1.nickname as nickname, pe.name as author, type(pa) as relation, f1.title as title, ge.name as genre\
	WITH	nickname, author, relation, title, collect(genre) as genre\
	RETURN	nickname, collect(author) as author, collect(relation) as artwork_relation, title, genre\
	ORDER BY nickname, author, genre, title\